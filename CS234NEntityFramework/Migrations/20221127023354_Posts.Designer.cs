// <auto-generated />
using System;
using CS234NEntityFramework.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CS234NEntityFramework.Migrations
{
    [DbContext(typeof(BitsContext))]
    [Migration("20221127023354_Posts")]
    partial class Posts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("CS234NEntityFramework.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_name");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("SalesPersonName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sales_person_name");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("state");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zipcode");

                    b.HasKey("AccountId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("StreetLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("street_line_1");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("street_line_2");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zipcode");

                    b.HasKey("AddressId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("AddressTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique();

                    b.ToTable("address_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Adjunct", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("AdjunctTypeId")
                        .HasColumnType("int")
                        .HasColumnName("adjunct_type_id");

                    b.Property<double?>("BatchVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("batch_volume")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("RecommendedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("recommended_quantity")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("RecommendedUseDuringId")
                        .HasColumnType("int")
                        .HasColumnName("recommended_use_during_id");

                    b.Property<string>("UseFor")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("use_for");

                    b.HasKey("IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdjunctTypeId" }, "adjunct_adjunct_type_FK_idx");

                    b.HasIndex(new[] { "RecommendedUseDuringId" }, "adjunct_use_during_FK_idx");

                    b.ToTable("adjunct", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AdjunctType", b =>
                {
                    b.Property<int>("AdjunctTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adjunct_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("AdjunctTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE1");

                    b.ToTable("adjunct_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AppConfig", b =>
                {
                    b.Property<int>("BreweryId")
                        .HasColumnType("int")
                        .HasColumnName("brewery_id");

                    b.Property<string>("BreweryLogo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("brewery_logo");

                    b.Property<string>("BreweryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("brewery_name");

                    b.Property<string>("Color1")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("color_1");

                    b.Property<string>("Color2")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("color_2");

                    b.Property<string>("Color3")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("color_3");

                    b.Property<string>("ColorBlack")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("color_black");

                    b.Property<string>("ColorWhite")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("color_white");

                    b.Property<string>("DefaultUnits")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_units")
                        .HasDefaultValueSql("'metric'");

                    b.Property<string>("HomePageBackgroundImage")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_page_background_image");

                    b.Property<string>("HomePageText")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("home_page_text");

                    b.HasKey("BreweryId")
                        .HasName("PRIMARY");

                    b.ToTable("app_config", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("app_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("role");

                    b.HasKey("AppUserId");

                    b.ToTable("app_user", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Barrel", b =>
                {
                    b.Property<int>("BrewContainerId")
                        .HasColumnType("int")
                        .HasColumnName("brew_container_id");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("treatment");

                    b.HasKey("BrewContainerId")
                        .HasName("PRIMARY");

                    b.ToTable("barrel", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<double?>("Abv")
                        .HasColumnType("double")
                        .HasColumnName("abv");

                    b.Property<double?>("ActualEfficiency")
                        .HasColumnType("double")
                        .HasColumnName("actual_efficiency");

                    b.Property<double?>("Age")
                        .HasColumnType("double")
                        .HasColumnName("age");

                    b.Property<double?>("Calories")
                        .HasColumnType("double")
                        .HasColumnName("calories");

                    b.Property<double?>("Carbonation")
                        .HasColumnType("double")
                        .HasColumnName("carbonation");

                    b.Property<double?>("CarbonationTemp")
                        .HasColumnType("double")
                        .HasColumnName("carbonation_temp");

                    b.Property<string>("CarbonationUsed")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("carbonation_used");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<DateTime?>("EstimatedFinishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("estimated_finish_date");

                    b.Property<int?>("FermentationStages")
                        .HasColumnType("int")
                        .HasColumnName("fermentation_stages");

                    b.Property<double?>("Fg")
                        .HasColumnType("double")
                        .HasColumnName("fg");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("finish_date");

                    b.Property<sbyte?>("ForcedCarbonation")
                        .HasColumnType("tinyint")
                        .HasColumnName("forced_carbonation");

                    b.Property<double?>("Ibu")
                        .HasColumnType("double")
                        .HasColumnName("ibu");

                    b.Property<string>("IbuMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ibu_method");

                    b.Property<double?>("KegPrimingFactor")
                        .HasColumnType("double")
                        .HasColumnName("keg_priming_factor");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("notes");

                    b.Property<double?>("Og")
                        .HasColumnType("double")
                        .HasColumnName("og");

                    b.Property<double?>("PrimaryAge")
                        .HasColumnType("double")
                        .HasColumnName("primary_age");

                    b.Property<double?>("PrimaryTemp")
                        .HasColumnType("double")
                        .HasColumnName("primary_temp");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime?>("ScheduledStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduled_start_date");

                    b.Property<double?>("SecondaryAge")
                        .HasColumnType("double")
                        .HasColumnName("secondary_age");

                    b.Property<double?>("SecondaryTemp")
                        .HasColumnType("double")
                        .HasColumnName("secondary_temp");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("TasteNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("taste_notes");

                    b.Property<double?>("TasteRating")
                        .HasColumnType("double")
                        .HasColumnName("taste_rating");

                    b.Property<double?>("Temp")
                        .HasColumnType("double")
                        .HasColumnName("temp");

                    b.Property<double?>("TertiaryAge")
                        .HasColumnType("double")
                        .HasColumnName("tertiary_age");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_cost");

                    b.Property<double>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("BatchId");

                    b.HasIndex(new[] { "RecipeId" }, "batch_recipe_FK");

                    b.HasIndex(new[] { "EquipmentId" }, "batch_recipe_FK_idx");

                    b.ToTable("batch", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.BatchContainer", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("BrewContainerId")
                        .HasColumnType("int")
                        .HasColumnName("brew_container_id");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("datetime")
                        .HasColumnName("date_in");

                    b.Property<DateTime?>("DateOut")
                        .HasColumnType("datetime")
                        .HasColumnName("date_out");

                    b.Property<double?>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("BatchId", "BrewContainerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "BrewContainerId" }, "batch_container_brew_container_FK_idx");

                    b.ToTable("batch_container", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.BrewContainer", b =>
                {
                    b.Property<int>("BrewContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brew_container_id");

                    b.Property<int>("ContainerSizeId")
                        .HasColumnType("int")
                        .HasColumnName("container_size_id");

                    b.Property<int>("ContainerStatusId")
                        .HasColumnType("int")
                        .HasColumnName("container_status_id");

                    b.Property<int>("ContainerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("container_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("BrewContainerId");

                    b.HasIndex(new[] { "ContainerSizeId" }, "brew_container_container_size_idx");

                    b.HasIndex(new[] { "ContainerStatusId" }, "brew_container_container_status_FK_idx");

                    b.HasIndex(new[] { "ContainerTypeId" }, "brew_container_container_type_FK_idx");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE2");

                    b.ToTable("brew_container", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerSize", b =>
                {
                    b.Property<int>("ContainerSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("container_size_id");

                    b.Property<double?>("MaxVolume")
                        .HasColumnType("double")
                        .HasColumnName("max_volume");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<double?>("WorkingVolume")
                        .HasColumnType("double")
                        .HasColumnName("working_volume");

                    b.HasKey("ContainerSizeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE3");

                    b.ToTable("container_size", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerStatus", b =>
                {
                    b.Property<int>("ContainerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("container_status_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ContainerStatusId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE4");

                    b.ToTable("container_status", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerType", b =>
                {
                    b.Property<int>("ContainerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("container_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ContainerTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE5");

                    b.ToTable("container_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<double?>("BatchSize")
                        .HasColumnType("double")
                        .HasColumnName("batch_size");

                    b.Property<double?>("BoilSize")
                        .HasColumnType("double")
                        .HasColumnName("boil_size");

                    b.Property<double?>("BoilTime")
                        .HasColumnType("double")
                        .HasColumnName("boil_time");

                    b.Property<sbyte?>("CalcBoilVolume")
                        .HasColumnType("tinyint")
                        .HasColumnName("calc_boil_volume");

                    b.Property<double?>("CoolingLossPct")
                        .HasColumnType("double")
                        .HasColumnName("cooling_loss_pct");

                    b.Property<double?>("EvapRate")
                        .HasColumnType("double")
                        .HasColumnName("evap_rate");

                    b.Property<double?>("HopUtilization")
                        .HasColumnType("double")
                        .HasColumnName("hop_utilization");

                    b.Property<double?>("LauterDeadspace")
                        .HasColumnType("double")
                        .HasColumnName("lauter_deadspace");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<double?>("TopUpKettle")
                        .HasColumnType("double")
                        .HasColumnName("top_up_kettle");

                    b.Property<double?>("TopUpWater")
                        .HasColumnType("double")
                        .HasColumnName("top_up_water");

                    b.Property<double?>("TrubChillerLoss")
                        .HasColumnType("double")
                        .HasColumnName("trub_chiller_loss");

                    b.Property<double?>("TunSpecificHeat")
                        .HasColumnType("double")
                        .HasColumnName("tun_specific_heat");

                    b.Property<double?>("TunVolume")
                        .HasColumnType("double")
                        .HasColumnName("tun_volume");

                    b.Property<double?>("TunWeight")
                        .HasColumnType("double")
                        .HasColumnName("tun_weight");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("EquipmentId");

                    b.HasIndex(new[] { "Name" }, "equipment_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Fermentable", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<sbyte?>("AddAfterBoil")
                        .HasColumnType("tinyint")
                        .HasColumnName("add_after_boil");

                    b.Property<double?>("CoarseFineDiff")
                        .HasColumnType("double")
                        .HasColumnName("coarse_fine_diff");

                    b.Property<double?>("Color")
                        .HasColumnType("double")
                        .HasColumnName("color");

                    b.Property<double?>("DiastaticPower")
                        .HasColumnType("double")
                        .HasColumnName("diastatic_power");

                    b.Property<int?>("FermentableTypeId")
                        .HasColumnType("int")
                        .HasColumnName("fermentable_type_id");

                    b.Property<double?>("IbuGalPerLb")
                        .HasColumnType("double")
                        .HasColumnName("ibu_gal_per_lb");

                    b.Property<double?>("MaxInBatch")
                        .HasColumnType("double")
                        .HasColumnName("max_in_batch");

                    b.Property<double?>("Moisture")
                        .HasColumnType("double")
                        .HasColumnName("moisture");

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("origin");

                    b.Property<double?>("Potential")
                        .HasColumnType("double")
                        .HasColumnName("potential");

                    b.Property<double?>("Protein")
                        .HasColumnType("double")
                        .HasColumnName("protein");

                    b.Property<sbyte?>("RecommendMash")
                        .HasColumnType("tinyint")
                        .HasColumnName("recommend_mash");

                    b.Property<double?>("Yield")
                        .HasColumnType("double")
                        .HasColumnName("yield");

                    b.HasKey("IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FermentableTypeId" }, "fermentable_fermentable_type_FK_idx");

                    b.ToTable("fermentable", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.FermentableType", b =>
                {
                    b.Property<int>("FermentableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fermentable_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("FermentableTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE6");

                    b.ToTable("fermentable_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Hop", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<double?>("Alpha")
                        .HasColumnType("double")
                        .HasColumnName("alpha");

                    b.Property<double?>("Beta")
                        .HasColumnType("double")
                        .HasColumnName("beta");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("form");

                    b.Property<int?>("HopTypeId")
                        .HasColumnType("int")
                        .HasColumnName("hop_type_id");

                    b.Property<double?>("Hsi")
                        .HasColumnType("double")
                        .HasColumnName("hsi");

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("origin");

                    b.HasKey("IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HopTypeId" }, "hop_hop_type_idx");

                    b.ToTable("hop", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.HopType", b =>
                {
                    b.Property<int>("HopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hop_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("HopTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE7");

                    b.ToTable("hop_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("notes");

                    b.Property<double>("OnHandQuantity")
                        .HasColumnType("double")
                        .HasColumnName("on_hand_quantity");

                    b.Property<double>("ReorderPoint")
                        .HasColumnType("double")
                        .HasColumnName("reorder_point");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_cost");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int")
                        .HasColumnName("unit_type_id");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("IngredientId");

                    b.HasIndex(new[] { "IngredientTypeId" }, "ingredient_ingredient_type_FK_idx");

                    b.HasIndex(new[] { "UnitTypeId" }, "ingredient_unit_type_FK_idx");

                    b.ToTable("ingredient", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientInventoryAddition", b =>
                {
                    b.Property<int>("IngredientInventoryAdditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingredient_inventory_addition_id");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("estimated_delivery_date");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<double>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("quantity");

                    b.Property<double?>("QuantityRemaining")
                        .HasColumnType("double")
                        .HasColumnName("quantity_remaining");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_cost");

                    b.HasKey("IngredientInventoryAdditionId");

                    b.HasIndex(new[] { "IngredientId" }, "ingredient_inventory_addition_ingredient_FK_idx");

                    b.HasIndex(new[] { "SupplierId" }, "ingredient_invertory_addition_supplier_FK_idx");

                    b.ToTable("ingredient_inventory_addition", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientInventorySubtraction", b =>
                {
                    b.Property<int>("IngredientInventorySubtractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingredient_inventory_subtraction_id");

                    b.Property<int?>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("quantity");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.HasKey("IngredientInventorySubtractionId");

                    b.HasIndex(new[] { "IngredientId" }, "ingredient_inventory_subtraction_ingredient_FK");

                    b.HasIndex(new[] { "BatchId" }, "ingredient_purchased_batch_FK");

                    b.ToTable("ingredient_inventory_subtraction", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingredient_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IngredientTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE8");

                    b.ToTable("ingredient_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("InventoryTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_transaction_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int")
                        .HasColumnName("app_user_id");

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<DateTime>("InventoryTransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("inventory_transaction_date");

                    b.Property<int>("InventoryTransctionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_transction_type_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("ProductContainerSizeId")
                        .HasColumnType("int")
                        .HasColumnName("product_container_size_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("InventoryTransactionId");

                    b.HasIndex(new[] { "AccountId" }, "inventory_transaction_account_idx");

                    b.HasIndex(new[] { "AppUserId" }, "inventory_transaction_app_user_FK_idx");

                    b.HasIndex(new[] { "BatchId" }, "inventory_transaction_batch_FK_idx");

                    b.HasIndex(new[] { "ProductContainerSizeId" }, "inventory_transaction_product_container_size_FK_idx");

                    b.HasIndex(new[] { "InventoryTransctionTypeId" }, "inventory_transaction_transaction_type_FK_idx");

                    b.ToTable("inventory_transaction", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.InventoryTransactionType", b =>
                {
                    b.Property<int>("InventoryTransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_transaction_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("InventoryTransactionTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE9");

                    b.ToTable("inventory_transaction_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Mash", b =>
                {
                    b.Property<int>("MashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mash_id");

                    b.Property<sbyte?>("EquipmentAdjust")
                        .HasColumnType("tinyint")
                        .HasColumnName("equipment_adjust");

                    b.Property<double?>("GrainTemp")
                        .HasColumnType("double")
                        .HasColumnName("grain_temp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("notes");

                    b.Property<double?>("Ph")
                        .HasColumnType("double")
                        .HasColumnName("ph");

                    b.Property<double?>("SpargeTemp")
                        .HasColumnType("double")
                        .HasColumnName("sparge_temp");

                    b.Property<double?>("TunSpecificHeat")
                        .HasColumnType("double")
                        .HasColumnName("tun_specific_heat");

                    b.Property<double?>("TunTemp")
                        .HasColumnType("double")
                        .HasColumnName("tun_temp");

                    b.Property<double?>("TunWeight")
                        .HasColumnType("double")
                        .HasColumnName("tun_weight");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("MashId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE10");

                    b.ToTable("mash", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.MashStep", b =>
                {
                    b.Property<int>("MashStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mash_step_id");

                    b.Property<string>("DecoctionAmount")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("decoction_amount");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<double?>("EndTemp")
                        .HasColumnType("double")
                        .HasColumnName("end_temp");

                    b.Property<double?>("InfuseAmount")
                        .HasColumnType("double")
                        .HasColumnName("infuse_amount");

                    b.Property<string>("InfuseTemp")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("infuse_temp");

                    b.Property<int>("MashId")
                        .HasColumnType("int")
                        .HasColumnName("mash_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<double?>("RampTime")
                        .HasColumnType("double")
                        .HasColumnName("ramp_time");

                    b.Property<double?>("StepTemp")
                        .HasColumnType("double")
                        .HasColumnName("step_temp");

                    b.Property<double?>("StepTime")
                        .HasColumnType("double")
                        .HasColumnName("step_time");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.Property<string>("WaterGrainRatio")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("water_grain_ratio");

                    b.HasKey("MashStepId");

                    b.HasIndex(new[] { "MashId" }, "mast_step_mash_FK_idx");

                    b.ToTable("mash_step", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Product", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("batch_id");

                    b.Property<int>("ProductContainerSizeId")
                        .HasColumnType("int")
                        .HasColumnName("product_container_size_id");

                    b.Property<decimal?>("IngredientCost")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("ingredient_cost");

                    b.Property<int>("QuantityRacked")
                        .HasColumnType("int")
                        .HasColumnName("quantity_racked");

                    b.Property<int>("QuantityRemaining")
                        .HasColumnType("int")
                        .HasColumnName("quantity_remaining");

                    b.Property<DateTime>("RackedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("racked_date");

                    b.Property<DateTime>("SellByDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sell_by_date");

                    b.Property<decimal?>("SuggestedPrice")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("suggested_price");

                    b.HasKey("BatchId", "ProductContainerSizeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "BatchId" }, "keg_batch_FK_idx");

                    b.HasIndex(new[] { "ProductContainerSizeId" }, "product_product_container_size_FK");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ProductContainerInventory", b =>
                {
                    b.Property<int>("ContainerSizeId")
                        .HasColumnType("int")
                        .HasColumnName("container_size_id");

                    b.Property<int>("QuantityClean")
                        .HasColumnType("int")
                        .HasColumnName("quantity_clean");

                    b.Property<int>("QuantityDirty")
                        .HasColumnType("int")
                        .HasColumnName("quantity_dirty");

                    b.HasKey("ContainerSizeId")
                        .HasName("PRIMARY");

                    b.ToTable("product_container_inventory", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ProductContainerSize", b =>
                {
                    b.Property<int>("ContainerSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("container_size_id");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("item_quantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<double>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("ContainerSizeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE11");

                    b.ToTable("product_container_size", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<double?>("ActualEfficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("actual_efficiency")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("BoilTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("boil_time")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("BoilVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("boil_volume")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Brewer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("brewer");

                    b.Property<double?>("CarbonationTemp")
                        .HasColumnType("double")
                        .HasColumnName("carbonation_temp");

                    b.Property<string>("CarbonationUsed")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("carbonation_used");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<double?>("Efficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("efficiency")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<double?>("EstimatedAbv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("estimated_abv")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("EstimatedColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("estimated_color")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("EstimatedFg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("estimated_fg")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("EstimatedOg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("estimated_og")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("FermentationStages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fermentation_stages")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte?>("ForcedCarbonation")
                        .HasColumnType("tinyint")
                        .HasColumnName("forced_carbonation");

                    b.Property<double?>("KegPrimingFactor")
                        .HasColumnType("double")
                        .HasColumnName("keg_priming_factor");

                    b.Property<int?>("MashId")
                        .HasColumnType("int")
                        .HasColumnName("mash_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("style_id");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.Property<double>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("RecipeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE12");

                    b.HasIndex(new[] { "EquipmentId" }, "recipe_equipment_FK_idx");

                    b.HasIndex(new[] { "MashId" }, "recipe_mash_FK_idx");

                    b.HasIndex(new[] { "StyleId" }, "recipe_style_type_FK_idx");

                    b.ToTable("recipe", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recipe_ingredient_id");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("quantity");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<double?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("time")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("UseDuringId")
                        .HasColumnType("int")
                        .HasColumnName("use_during_id");

                    b.HasKey("RecipeIngredientId");

                    b.HasIndex(new[] { "IngredientId" }, "recipe_ingredient_ingredient_idx");

                    b.HasIndex(new[] { "RecipeId" }, "recipe_ingredient_recipe_FK");

                    b.HasIndex(new[] { "UseDuringId" }, "recipe_ingredient_use_during_FK_idx");

                    b.ToTable("recipe_ingredient", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("style_id");

                    b.Property<double?>("AbvMax")
                        .HasColumnType("double")
                        .HasColumnName("abv_max");

                    b.Property<double?>("AbvMin")
                        .HasColumnType("double")
                        .HasColumnName("abv_min");

                    b.Property<double?>("CarbMax")
                        .HasColumnType("double")
                        .HasColumnName("carb_max");

                    b.Property<double?>("CarbMin")
                        .HasColumnType("double")
                        .HasColumnName("carb_min");

                    b.Property<string>("CategoryLetter")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_letter");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_name");

                    b.Property<string>("CategoryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_number");

                    b.Property<double?>("ColorMax")
                        .HasColumnType("double")
                        .HasColumnName("color_max");

                    b.Property<double?>("ColorMin")
                        .HasColumnType("double")
                        .HasColumnName("color_min");

                    b.Property<string>("Examples")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("examples");

                    b.Property<double?>("FgMax")
                        .HasColumnType("double")
                        .HasColumnName("fg_max");

                    b.Property<double?>("FgMin")
                        .HasColumnType("double")
                        .HasColumnName("fg_min");

                    b.Property<double?>("IbuMax")
                        .HasColumnType("double")
                        .HasColumnName("ibu_max");

                    b.Property<double?>("IbuMin")
                        .HasColumnType("double")
                        .HasColumnName("ibu_min");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("ingredients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("notes");

                    b.Property<double?>("OgMax")
                        .HasColumnType("double")
                        .HasColumnName("og_max");

                    b.Property<double?>("OgMin")
                        .HasColumnType("double")
                        .HasColumnName("og_min");

                    b.Property<string>("Profile")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("profile");

                    b.Property<string>("StyleGuide")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("style_guide");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("StyleId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE13");

                    b.ToTable("style", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_first_name");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_last_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("note");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("website");

                    b.HasKey("SupplierId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE14");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.SupplierAddress", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("address_type_id");

                    b.HasKey("SupplierId", "AddressId", "AddressTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "AddressId" }, "supplier_address_address_FK_idx");

                    b.HasIndex(new[] { "AddressTypeId" }, "supplier_address_address_type_FK_idx");

                    b.ToTable("supplier_address", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.UnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unit_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("UnitTypeId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE15");

                    b.ToTable("unit_type", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.UseDuring", b =>
                {
                    b.Property<int>("UseDuringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("use_during_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("UseDuringId");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("name_UNIQUE16");

                    b.ToTable("use_during", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Yeast", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<sbyte?>("AddToSecondary")
                        .HasColumnType("tinyint")
                        .HasColumnName("add_to_secondary");

                    b.Property<double?>("Attenuation")
                        .HasColumnType("double")
                        .HasColumnName("attenuation");

                    b.Property<string>("BestFor")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("best_for");

                    b.Property<string>("Flocculation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flocculation");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("form");

                    b.Property<string>("Laboratory")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("laboratory");

                    b.Property<int?>("MaxReuse")
                        .HasColumnType("int")
                        .HasColumnName("max_reuse");

                    b.Property<double?>("MaxTemp")
                        .HasColumnType("double")
                        .HasColumnName("max_temp");

                    b.Property<double?>("MinTemp")
                        .HasColumnType("double")
                        .HasColumnName("min_temp");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("IngredientId")
                        .HasName("PRIMARY");

                    b.ToTable("yeast", (string)null);
                });

            modelBuilder.Entity("IngredientSubstitute", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("SubstituteIngredientId")
                        .HasColumnType("int")
                        .HasColumnName("substitute_ingredient_id");

                    b.HasKey("IngredientId", "SubstituteIngredientId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "SubstituteIngredientId" }, "ingredient_substitute_substitute_ingredient_FK_idx");

                    b.ToTable("ingredient_substitute", (string)null);
                });

            modelBuilder.Entity("IngredientUsedIn", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("style_id");

                    b.HasKey("IngredientId", "StyleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "StyleId" }, "usedin_style_type_FK_idx");

                    b.ToTable("ingredient_used_in", (string)null);
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Adjunct", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.AdjunctType", "AdjunctType")
                        .WithMany("Adjuncts")
                        .HasForeignKey("AdjunctTypeId")
                        .IsRequired()
                        .HasConstraintName("adjunct_adjunct_type_FK");

                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithOne("Adjunct")
                        .HasForeignKey("CS234NEntityFramework.Models.Adjunct", "IngredientId")
                        .IsRequired()
                        .HasConstraintName("adjunct_ingredient_FK");

                    b.HasOne("CS234NEntityFramework.Models.UseDuring", "RecommendedUseDuring")
                        .WithMany("Adjuncts")
                        .HasForeignKey("RecommendedUseDuringId")
                        .HasConstraintName("adjunct_use_during_FK");

                    b.Navigation("AdjunctType");

                    b.Navigation("Ingredient");

                    b.Navigation("RecommendedUseDuring");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Barrel", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.BrewContainer", "BrewContainer")
                        .WithOne("Barrel")
                        .HasForeignKey("CS234NEntityFramework.Models.Barrel", "BrewContainerId")
                        .IsRequired()
                        .HasConstraintName("barrel_brew_container_FK");

                    b.Navigation("BrewContainer");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Batch", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Equipment", "Equipment")
                        .WithMany("Batches")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("batch_equipment_FK");

                    b.HasOne("CS234NEntityFramework.Models.Recipe", "Recipe")
                        .WithMany("Batches")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("batch_recipe_FK");

                    b.Navigation("Equipment");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.BatchContainer", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Batch", "Batch")
                        .WithMany("BatchContainers")
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("batch_container_batch_FK");

                    b.HasOne("CS234NEntityFramework.Models.BrewContainer", "BrewContainer")
                        .WithMany("BatchContainers")
                        .HasForeignKey("BrewContainerId")
                        .IsRequired()
                        .HasConstraintName("batch_container_brew_container_FK");

                    b.Navigation("Batch");

                    b.Navigation("BrewContainer");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.BrewContainer", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.ContainerSize", "ContainerSize")
                        .WithMany("BrewContainers")
                        .HasForeignKey("ContainerSizeId")
                        .IsRequired()
                        .HasConstraintName("brew_container_container_size");

                    b.HasOne("CS234NEntityFramework.Models.ContainerStatus", "ContainerStatus")
                        .WithMany("BrewContainers")
                        .HasForeignKey("ContainerStatusId")
                        .IsRequired()
                        .HasConstraintName("brew_container_container_status_FK");

                    b.HasOne("CS234NEntityFramework.Models.ContainerType", "ContainerType")
                        .WithMany("BrewContainers")
                        .HasForeignKey("ContainerTypeId")
                        .IsRequired()
                        .HasConstraintName("brew_container_container_type_FK");

                    b.Navigation("ContainerSize");

                    b.Navigation("ContainerStatus");

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Fermentable", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.FermentableType", "FermentableType")
                        .WithMany("Fermentables")
                        .HasForeignKey("FermentableTypeId")
                        .HasConstraintName("fermentable_fermentable_type_FK");

                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithOne("Fermentable")
                        .HasForeignKey("CS234NEntityFramework.Models.Fermentable", "IngredientId")
                        .IsRequired()
                        .HasConstraintName("fermentable_ingredient_FK");

                    b.Navigation("FermentableType");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Hop", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.HopType", "HopType")
                        .WithMany("Hops")
                        .HasForeignKey("HopTypeId")
                        .HasConstraintName("hop_hop_type");

                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithOne("Hop")
                        .HasForeignKey("CS234NEntityFramework.Models.Hop", "IngredientId")
                        .IsRequired()
                        .HasConstraintName("hop_ingredient_FK");

                    b.Navigation("HopType");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Ingredient", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .IsRequired()
                        .HasConstraintName("ingredient_ingredient_type_FK");

                    b.HasOne("CS234NEntityFramework.Models.UnitType", "UnitType")
                        .WithMany("Ingredients")
                        .HasForeignKey("UnitTypeId")
                        .IsRequired()
                        .HasConstraintName("ingredient_unit_type_FK");

                    b.Navigation("IngredientType");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientInventoryAddition", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientInventoryAdditions")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("ingredient_inventory_addition_ingredient_FK");

                    b.HasOne("CS234NEntityFramework.Models.Supplier", "Supplier")
                        .WithMany("IngredientInventoryAdditions")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("ingredient_invertory_addition_supplier_FK");

                    b.Navigation("Ingredient");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientInventorySubtraction", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Batch", "Batch")
                        .WithMany("IngredientInventorySubtractions")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("ingredient_purchased_batch_FK");

                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientInventorySubtractions")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("ingredient_inventory_subtraction_ingredient_FK");

                    b.Navigation("Batch");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.InventoryTransaction", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Account", "Account")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("inventory_transaction_account");

                    b.HasOne("CS234NEntityFramework.Models.AppUser", "AppUser")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("inventory_transaction_app_user_FK");

                    b.HasOne("CS234NEntityFramework.Models.Batch", "Batch")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("inventory_transaction_batch_FK");

                    b.HasOne("CS234NEntityFramework.Models.InventoryTransactionType", "InventoryTransctionType")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("InventoryTransctionTypeId")
                        .IsRequired()
                        .HasConstraintName("inventory_transaction_transaction_type_FK");

                    b.HasOne("CS234NEntityFramework.Models.ProductContainerSize", "ProductContainerSize")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductContainerSizeId")
                        .IsRequired()
                        .HasConstraintName("inventory_transaction_product_container_size_FK");

                    b.Navigation("Account");

                    b.Navigation("AppUser");

                    b.Navigation("Batch");

                    b.Navigation("InventoryTransctionType");

                    b.Navigation("ProductContainerSize");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.MashStep", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Mash", "Mash")
                        .WithMany("MashSteps")
                        .HasForeignKey("MashId")
                        .IsRequired()
                        .HasConstraintName("mast_step_mash_FK");

                    b.Navigation("Mash");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Product", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Batch", "Batch")
                        .WithMany("Products")
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("product_batch_FK");

                    b.HasOne("CS234NEntityFramework.Models.ProductContainerSize", "ProductContainerSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductContainerSizeId")
                        .IsRequired()
                        .HasConstraintName("product_product_container_size_FK");

                    b.Navigation("Batch");

                    b.Navigation("ProductContainerSize");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ProductContainerInventory", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.ProductContainerSize", "ContainerSize")
                        .WithOne("ProductContainerInventory")
                        .HasForeignKey("CS234NEntityFramework.Models.ProductContainerInventory", "ContainerSizeId")
                        .IsRequired()
                        .HasConstraintName("product_container_inventory_product_container_FK");

                    b.Navigation("ContainerSize");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Recipe", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Equipment", "Equipment")
                        .WithMany("Recipes")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("recipe_equipment_FK");

                    b.HasOne("CS234NEntityFramework.Models.Mash", "Mash")
                        .WithMany("Recipes")
                        .HasForeignKey("MashId")
                        .HasConstraintName("recipe_mash_FK");

                    b.HasOne("CS234NEntityFramework.Models.Style", "Style")
                        .WithMany("Recipes")
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("recipe_style_FK");

                    b.Navigation("Equipment");

                    b.Navigation("Mash");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.RecipeIngredient", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("recipe_ingredient_ingredient_FK");

                    b.HasOne("CS234NEntityFramework.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("recipe_ingredient_recipe_FK");

                    b.HasOne("CS234NEntityFramework.Models.UseDuring", "UseDuring")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("UseDuringId")
                        .HasConstraintName("recipe_ingredient_use_during_FK");

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");

                    b.Navigation("UseDuring");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.SupplierAddress", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Address", "Address")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("supplier_address_address_FK");

                    b.HasOne("CS234NEntityFramework.Models.AddressType", "AddressType")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("supplier_address_address_type_FK");

                    b.HasOne("CS234NEntityFramework.Models.Supplier", "Supplier")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("supplier_address_supplier_FK");

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Yeast", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Ingredient", "Ingredient")
                        .WithOne("Yeast")
                        .HasForeignKey("CS234NEntityFramework.Models.Yeast", "IngredientId")
                        .IsRequired()
                        .HasConstraintName("yeast_ingredient_FK");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("IngredientSubstitute", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("ingredient_substitute_ingredient_FK");

                    b.HasOne("CS234NEntityFramework.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("SubstituteIngredientId")
                        .IsRequired()
                        .HasConstraintName("ingredient_substitute_substitute_ingredient_FK");
                });

            modelBuilder.Entity("IngredientUsedIn", b =>
                {
                    b.HasOne("CS234NEntityFramework.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("used_in_ingredient_FK");

                    b.HasOne("CS234NEntityFramework.Models.Style", null)
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("used_in_style_type_FK");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Account", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Address", b =>
                {
                    b.Navigation("SupplierAddresses");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AddressType", b =>
                {
                    b.Navigation("SupplierAddresses");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AdjunctType", b =>
                {
                    b.Navigation("Adjuncts");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.AppUser", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Batch", b =>
                {
                    b.Navigation("BatchContainers");

                    b.Navigation("IngredientInventorySubtractions");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.BrewContainer", b =>
                {
                    b.Navigation("Barrel");

                    b.Navigation("BatchContainers");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerSize", b =>
                {
                    b.Navigation("BrewContainers");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerStatus", b =>
                {
                    b.Navigation("BrewContainers");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ContainerType", b =>
                {
                    b.Navigation("BrewContainers");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Equipment", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.FermentableType", b =>
                {
                    b.Navigation("Fermentables");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.HopType", b =>
                {
                    b.Navigation("Hops");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Ingredient", b =>
                {
                    b.Navigation("Adjunct");

                    b.Navigation("Fermentable");

                    b.Navigation("Hop");

                    b.Navigation("IngredientInventoryAdditions");

                    b.Navigation("IngredientInventorySubtractions");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("Yeast");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.InventoryTransactionType", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Mash", b =>
                {
                    b.Navigation("MashSteps");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.ProductContainerSize", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("ProductContainerInventory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Recipe", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Style", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.Supplier", b =>
                {
                    b.Navigation("IngredientInventoryAdditions");

                    b.Navigation("SupplierAddresses");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.UnitType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CS234NEntityFramework.Models.UseDuring", b =>
                {
                    b.Navigation("Adjuncts");

                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
